/*

 Built by
    __                   ____
   / /___  ______  ___  / __/___  ____
  / __/ / / / __ \/ _ \/ /_/ __ \/ __ \
 / /_/ /_/ / /_/ /  __/ __/ /_/ / /_/ /
 \__/\__, / .___/\___/_/  \____/\____/
  /____/_/
 */

module.exports = function($vern) {

  $vern.BaseController.prototype.checkAuth = function(req, res, next) {
    res.resp = new $vern.models.ResponseModel(res);

    if(req.params.authenticationKey) {
      req.headers['authentication-key'] = req.params.authenticationKey;
      delete req.params.authenticationKey;
    }
    if(req.headers['authentication-key']) {

      new $vern.models.UserModel().getByAuthenticationKey(req.headers['authentication-key'], function(err, rows) {
        if(err) {
          console.log(err);
          return res.resp.handleError(403, 'Authorization Required: an error occurred');
        }
        if(rows.length <= 0) {
          req.user = null;
          return next();
        }

        req.user = new $vern.models.UserModel(rows[0]);
        return next();
      });
    } else {
      return next();
    }
  };

  $vern.BaseController.prototype.requiresAuth = function(req, res, next) {
    return req.$scope.isAuthenticated(req, res, next);
  };

  $vern.BaseController.prototype.isAuthenticated = function(req, res, next) {
    if(!req.user) {
      return res.resp.handleError(403, 'Authorization Required');
    }

    var permissions = [];

    var route = req.$scope.getRoute(req.route.path, req.route.method);
    if(!route) {
      console.log('Route not found');
      console.log(req.route);
      return res.resp.handleError(404, 'Route not found');
    }

    if(route.requiresAdmin) {
      permissions = permissions.concat(req.$scope.permissions);
    } else if(req.$scope.publicPermissions.length > 0) {
      permissions = permissions.concat(req.$scope.publicPermissions);
    }

    req.user.hasPermission(permissions, function(access) {
      if(!access) {
        return res.resp.handleError(403, 'Authorization Required');
      }

      return next();
    });
  };

  $vern.BaseController.prototype.parseRoute = function($vern, $scope, conf) {
    console.log("Adding [" + conf.method + "] route: " + conf.path);
    if(conf.requiresAuth === true) {
      $vern.app[conf.method](conf.path, $scope.injectParams, $scope.checkAuth, $scope.requiresAuth, conf.controller);
    } else {
      $vern.app[conf.method](conf.path, $scope.injectParams, $scope.checkAuth, conf.controller);
    }
  };

  $vern.BaseController.prototype.routeDefaults = {
    method: 'get',
    path: '/',
    controller: function(req, res) { res.send(404); },
    requiresAuth: false,
    requiresAdmin: false
  };

  $vern.BaseController.prototype.additionalCRUD = function($scope) {
    if($scope.userRoute.length > 0) {
      $scope.addRoute({
        method: 'post',
        path: $scope.userRoute + '/totals',
        requiresAuth: true,
        controller: $scope.handleTotals
      });
      $scope.addRoute({
        method: 'post',
        path: $scope.userRoute + '/sum',
        requiresAuth: true,
        controller: $scope.handleSum
      });
      $scope.addRoute({
        method: 'post',
        path: $scope.userRoute + '/order',
        requiresAuth: true,
        controller: $scope.handleOrder
      });
      $scope.addRoute({
        method: 'get',
        path: $scope.userRoute,
        requiresAuth: true,
        controller: $scope.handleListAccount
      });
      $scope.addRoute({
        method: 'get',
        path: $scope.userRoute + '/:_id',
        requiresAuth: true,
        controller: $scope.handleListAccount
      });
      $scope.addRoute({
        method: 'post',
        path: $scope.userRoute,
        requiresAuth: true,
        controller: $scope.handlePost
      });
      $scope.addRoute({
        method: 'del',
        path: $scope.userRoute,
        requiresAuth: true,
        controller: $scope.handleDelete
      });
    }
    // default CRUD for admin section.
    if($scope.adminRoute.length > 0) {
      $scope.addRoute({
        method: 'post',
        path: $scope.adminRoute + '/order',
        requiresAuth: true,
        requiresAdmin: true,
        controller: $scope.handleOrder
      });
      $scope.addRoute({
        method: 'get',
        path: $scope.adminRoute,
        requiresAuth: true,
        requiresAdmin: true,
        controller: $scope.handleListAdmin
      });
      $scope.addRoute({
        method: 'get',
        path: $scope.adminRoute + '/:_id',
        requiresAuth: true,
        requiresAdmin: true,
        controller: $scope.handleListAdmin
      });
      $scope.addRoute({
        method: 'post',
        path: $scope.adminRoute,
        requiresAuth: true,
        requiresAdmin: true,
        controller: $scope.handlePost
      });
      $scope.addRoute({
        method: 'del',
        path: $scope.adminRoute,
        requiresAuth: true,
        requiresAdmin: true,
        controller: $scope.handleDelete
      });
    }

    return $scope;
  };

  $vern.BaseModel.prototype.requiresOwner = function(method) {
    var $scope = this;
    var obj = new $scope.constructor();
    if(method === 'post') {
      if(typeof obj._owner === 'undefined') {
        return false;
      } else {
        return true;
      }
    } else if(method === 'delete') {
      if(typeof obj._owner === 'undefined') {
        return false;
      } else {
        return true;
      }
    } else if(method === 'list') {
      if(typeof obj._owner === 'undefined') {
        return false;
      } else if(obj._owner === true) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  $vern.BaseModel.prototype.getByOwner = function(owner, cb) {
    var $scope = this;

    if(!owner) {
      return cb(new Error('Missing owner'), null);
    }

    if(typeof owner === 'object' && owner._id) {
      owner = owner._id.toString();
    } else if(typeof owner === 'object' && owner.toString()) {
      owner = owner.toString();
    }

    try {
      $scope.__$parent.db.find(this.__type, {_owner: owner}, function(err, res) {
        if(err) {
          return cb(err, null);
        }

        var d = [];
        for(var j = 0; j < res.length; j++) {
          var obj = $scope.new_model(res[j]);
          d.push(obj.update(res[j]));
        }
        return cb(err, d);
      });
    } catch(e) {
      cb(e, null);
    }
  };

  $vern.BaseModel.prototype.getByIdAndOwner = function(id, owner, cb) {
    var $scope = this;

    if(!id) {
      return cb(new Error('Missing ID'), null);
    }

    if(!owner) {
      return cb(new Error('Missing owner'), null);
    }

    try {
      if(typeof id === 'string') {
        id = $scope.__$parent.db.ID(id);
      }
      if(typeof owner === 'object' && owner._id) {
        owner = owner._id.toString();
      } else if(typeof owner === 'object' && owner.toString()) {
        owner = owner.toString();
      }
      $scope.__$parent.db.findOne(this.__type, {_id: id, _owner: owner}, function(err, res) {
        if(err || !res) {
          return cb(err, null);
        }

        var obj = $scope.new_model(res);
        cb(null, obj.update(res));
      });
    } catch(e) {
      cb(e, null);
    }
  };

  $vern.BaseModel.prototype.addOwner = function(owner) {
    var $scope = this;
    var tmp = null;

    if(!owner) {
      return $scope;
    }

    if(typeof owner === 'object' && owner._id) {
      owner = owner._id.toString();
    } else if(typeof owner === 'object' && owner.toString()) {
      owner = owner.toString();
    }

    if(typeof $scope._owner === 'string') {
      tmp = $scope._owner;
    }
    if(!util.isArray($scope._owner)) {
      $scope._owner = [];
    }

    if(tmp) {
      $scope._owner.push(tmp);
    }
    $scope._owner.push(owner);
    return $scope;
  };

  $vern.controllers.AuthController = require('./AuthController');
  $vern.models.UserModel = require('./UserModel')($vern);

  return $vern;
};
