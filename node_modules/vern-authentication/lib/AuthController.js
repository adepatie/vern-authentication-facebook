/**
 * Authorization and registration functions
 *
 * @class AuthController
 * @constructor
 */
function AuthController($parent) {
  var validator         = require('validator'),
    crypto            = require('crypto'),
    extend            = require('node.extend');

  var $scope = new $parent.controller();

  $scope.firstRun = function(defs) {
    if(!defs) {
      defs = require('./definitions.sample.js');
    }
    new $parent.models.UserModel().count(function(err, cnt) {
      if(err) {
        console.log(err);
      }
      console.log(cnt);
      if(cnt === 0) {
        // There are no users, register the admin.
        createUser({
          email: defs.default_admin,
          username: 'admin',
          password: defs.default_password,
          display_name: 'Administrator',
          first_name: 'Administration',
          last_name: '',
          birthday: '01/01/1985',
          registrationCode: '',
          role: 'admin',
          active: true
        }, function(err, newUser) {
          console.log('Admin user created');
        });
      }
    });
  };

  $scope.login = function(req, res, next) {
    var resp = res.resp;
    var params = req.params;
    if(!$scope.validate({
      username: req.params.username,
      loginPassword: req.params.password
    }, res)) { return; }
    params.username = params.username.toLowerCase();

    $scope.doLogin(params.username, params.password, function(err, user) {
      if(err) {
        return resp.handleError(500, err);
      }

      resp.data(user.account());
      res.send(resp.responseCode, resp.output());
    });
  };

  $scope.doLogin = function(username, password, callback) {
    username = username.toLowerCase();

    new $parent.models.UserModel().query({$or: [{email: username}, {username_lc: username}]}, function(err, rows) {
      if(err || rows.length <= 0) {
        // User does not exist.
        console.log(err);
        return callback(new Error('Invalid username or password'), null);
      }

      // User exists, check password
      saltPassword(rows[0].secret, password, function(encodedPassword) {
        if(rows[0].password !== encodedPassword) {
          // Wrong password.
          return callback(new Error('Invalid username or password'), null);
        }

        if(rows[0].active === false) {
          return callback(new Error('Account is not active'), null);
        }

        var user = new $parent.models.UserModel(rows[0]);
        loginUser(user, function(err, user) {
          if(err) {
            return callback(err, null);
          }

          return callback(null, user);
        });
      });
    });
  };

  $scope.createRegistrationCode = function() {
    var timestamp = new Date().getTime();
    var rand = (Math.floor(Math.random() * 1000000000)).toString(36);
    registrationCode = crypto.createHash('md5').update(timestamp + rand).digest("hex");

    return registrationCode;
  };

  // I was thinking this function could be used as a "captcha" sequence.
  // Some kind of question could be returned to the app which would be randomly selected and
  // then the user would be required to answer correctly before registering successfully. Eliminate bots!
  $scope.getRegistrationCode = function(req, res, next) {
    var registrationCode = $scope.createRegistrationCode();
    new $parent.models.UserModel({registration: true, registrationCode: registrationCode}).save(function(err, body) {
      var resp = res.resp;
      if(err) {
        resp.setCode(417);
        resp.errorMessage('An error occurred');
      } else {
        resp.data({
          registrationCode: registrationCode
        });
      }

      resp.send();
    });
  }

  $scope.preRegisterUser = function(req, res, next) {
    var resp = res.resp;
    var registrationCode = $scope.createRegistrationCode();

    var params = $scope.validate({
      email: req.params.email,
      password: req.params.password,
      confirm_password: req.params.confirm_password,
      display_name: req.params.display_name
    }, res);
    if(!params) { return; }

    params.email = params.email.toLowerCase();
    params.username = params.username_lc = params.email;

    new $parent.models.UserModel().query(
      {$or: [{username_lc: params.username_lc}, {email: params.email}]},
      function(err, rows) {
        if(err) {
          console.log(err);
          return resp.handleError(res, 417, new Error('An error occurred with your registration: ' + err.code));
        }
        if(rows.length > 0) {
          return resp.handleError(res, 417, new Error('Email already registered'));
        }

        var emailHash = crypto.createHash('md5').update(params.email).digest("hex");

        createUser({
          email: params.email,
          username: params.username,
          password: params.password,
          confirm_password: params.password,
          display_name: params.display_name,
          active: false,
          registrationCode: registrationCode,
          gravatar_url: '//www.gravatar.com/avatar/' + emailHash
        }, function(err, newUser) {
          if(!$parent.config.registration_on) {
            resp.data({ok: true});
            resp.send();
          } else {
            var opts = {
              email: newUser.email,
              registrationCode: newUser.registrationCode
            };

            var mail = new $parent.controllers.MailerController($scope);

            mail.single('activate_account', opts, "Activate your factr.io account", function(err, responseCode) {
              if(err) {
                return resp.handleError(res, 500, 'Internal error occurred');
              }

              resp.data(newUser.account());
              resp.send();
            });
          }
        });
      });
  };

  $scope.activateAccount = function(req, res, next) {
    var resp = res.resp;

    if(validator.isNull(req.params.activation_code)) {
      return resp.handleError(res, 417, new Error('Missing Activation Code'));
    }

    new $parent.models.UserModel().getByRegistrationCode(req.params.activation_code, function(err, user) {
      if(err) {
        console.log(err);
        return resp.handleError(res, 500, new Error('An error occurred getting the account'));
      }

      if(!user || user.length <= 0) {
        return resp.handleError(res, 404, new Error('User account not found'));
      }

      user = user[0];

      user.active = true;
      user.role = 'user';
      user.registrationCode = $scope.createRegistrationCode();
      user.save(function(err, user) {
        resp.data(user.account());
        resp.send();
      });
    });
  };

  // Update doc with params.registrationCode name
  $scope.registerUser = function(req, res, next) {
    var resp = res.resp;
    // Check valid Reg code

    if(validator.isNull(req.params.registrationCode)) {
      return resp.handleError(res, 417, new Error('Missing registrationCode'));
    }

    var params = $scope.validate({
      email: req.params.email
    }, res);
    if(!params) {return};

    params.email = params.email.toLowerCase();
    params.username_lc = params.username.toLowerCase();
    params.first_name = params.first_name ? params.first_name : '';
    params.last_name = params.last_name ? params.last_name : '';
    params.birthday = params.birthday ? params.birthday : '01/01/1979';

    new $parent.models.UserModel().query({registrationCode: params.registrationCode}, function(err, rows) {
      if(err || rows.length <= 0) {
        return resp.handleError(res, 417, new Error('Registration code not found'));
      }

      var userId = rows[0]._id;

      new $parent.models.UserModel().query(
        {$or: [{username_lc: req.params.username_lc}, {email: req.params.email.toLowerCase()}]},
        function(err, rows) {
          if(err) {
            console.log(err);
            return resp.handleError(417, 'A problem occurred with your registration: ' + err.code);
          }
          if(rows.length > 0) {
            return resp.handleError(417, 'Email or username is already registered.');
          }

          createUser({
            _id: userId,
            email: req.params.email,
            username: req.params.username,
            password: req.params.password,
            first_name: req.params.first_name,
            last_name: req.params.last_name,
            birthday: req.params.birthday,
            registrationCode: req.params.registrationCode,
            active: true
          }, function(err, newUser) {
            resp.data(newUser.account());
            resp.send();
          });
        });
    });
  };

  $scope.encodePassword = function(user, cb) {
    if(!user.secret || user.secret.length == 0) {
      var buf = crypto.randomBytes(32);
      user.secret = buf.toString('hex');
    }
    crypto.pbkdf2(user.password, user.secret, 1000, 512, function(err, encodedPassword) {
      if (err) throw err;
      user.password = new Buffer(encodedPassword, 'base64').toString('hex');
      user.save(function(err, body) {
        cb(err, body);
      });
    });
  }

  var saltPassword = function(salt, plaintext, callback) {
    crypto.pbkdf2(plaintext, salt, 1000, 512, function(err, encodedPassword) {
      callback(new Buffer(encodedPassword, 'base64').toString('hex'));
    });
  }
  $scope.saltPassword = saltPassword;

  $scope.forgotPassword = function(req, res, next) {
    var resp = res.resp;

    if(!validator.isEmail(req.params.email)) {
      return resp.handleError(res, 417, new Error('Missing email address'));
    }

    var email = req.params.email.toLowerCase();
    new $parent.models.UserModel().query({active: true, email: email}, function(err, rows) {
      if(err || rows.length <= 0) {
        resp.setCode(404);
        resp.errorMessage('Email address not found');
        resp.send(res);
        return;
      }

      var user = new $parent.models.UserModel(rows[0]);
      if(!user.active) {
        return resp.handleError(res, 404, 'Account not found or inactive');
      }

      var buf = crypto.randomBytes(32);
      var passwordCode = buf.toString('hex') + user.secret;
      user.passwordCode = passwordCode;
      user.save(function(err, body) {
        if(err) {
          resp.setCode(500);
          resp.errorMessage('Something went wrong.');
          resp.send(res);
          return;
        }

        // Now we have the password reset code, lets mail it to the user.
        var details = {
          email: email,
          passwordCode: passwordCode
        };

        var mail = new $parent.controllers.MailerController($scope);

        mail.single('forgot_password', details, "Reset your password", function(err, responseCode) {
          if(err) {
            resp.setCode(500);
            console.log(err);
            resp.errorMessage('Something went wrong.');
            resp.send(res);
            return;
          }

          resp.statusMessage('An email was sent to you with instructions to reset your password.');
          resp.send(res);
          return;
        });

      });
    });
  }

  $scope.resetPassword = function(req, res, next) {
    var resp = res.resp;

    if(validator.isNull(req.params.password_code)) {
      return resp.handleError(res, 500, new Error('No password reset code'));
    }
    if(!$scope.validate({
      password: req.params.password
    }, res)) { return; }

    new $parent.models.UserModel().query({passwordCode: req.params.password_code}, function(err, rows) {
      if(err) {
        console.log(err);
        return resp.handleError(res, 500, new Error('Internal server error: ' + err.message));
      }
      if(rows.length <= 0) {
        return resp.handleError(res, 500, new Error('Invalid password code'));
      }

      var user = new $parent.models.UserModel(rows[0]);
      user.passwordCode = null;
      user.authenticationKey = generateAuthenticationKey(user.email, user.secret);
      user.save(function(err, body) {
        if(err) {
          console.log(err);
          return resp.handleError(res, 500, new Error('Internal server error: ' + err.message));
        }

        user.password = req.params.password;
        $scope.encodePassword(user, function(err, body) {
          resp.statusMessage("Password updated.");
          resp.data(user.account());
          resp.send();
        });
      });
    });
  }

  $scope.changeAPIKey = function(req, res, next) {
    var user = req.user;
    var resp = res.resp;

    user.authenticationKey = generateAuthenticationKey(user.email, user.secret);

    user.save(function() {
      resp.data(user.account());
      resp.send();
    });
  };

  function createUser(details, cb) {
    console.log('creating user:');
    console.log(details.email);
    var originalDetails = extend({}, details);

    details.email = details.email.toLowerCase();
    if(!details.username) {
      details.username = details.email;
    }
    details.username_lc = details.username.toLowerCase();

    var buf = crypto.randomBytes(32);
    details.secret = buf.toString('hex');

    details.create_time = new Date().getTime();

    if(!details.role) {
      details.role = defs.default_role;
    }
    details.authenticationKey = $scope.generateAuthenticationKey(details.email, details.secret);

    var newUser = new $parent.models.UserModel(details);

    newUser.save(function(err, userAcct) {
      if(err) {
        return cb('Account already exists', null);
      }

      new $parent.models.ProfileModel({
        _owner: userAcct._id.toString(),
        display_name: originalDetails.display_name,
        gravatar_url: originalDetails.gravatar_url,
        avatar_url: originalDetails.avatar_url,
        biography: originalDetails.biography,
        occupation: originalDetails.occupation,
        occupation_company: originalDetails.occupation_company
      }).save(function(err, profile) {
          if(details.password) {
            $scope.encodePassword(userAcct, function(err, userAcct) {
              return cb(null, userAcct);
            });
          } else {
            return cb(null, userAcct);
          }
        });
    });
  }
  $scope.createUser = createUser;

  function loginUser(user, cb) {
    var login_time = new Date().getTime();

    user.last_login = login_time;
    if($parent.config.strict_logins === true) {
      if(user.role !== 'admin') {
        user.authenticationKey = $scope.generateAuthenticationKey(user.email, user.secret);
      }
    }
    user.save(function(err, body) {
      if(err) {
        return cb("Error saving user", null);
      }

      return cb(null, body);
    });
  }
  $scope.loginUser = loginUser;

  function generateAuthenticationKey(email, secret) {
    var time = new Date().getTime();
    return crypto.createHash('md5').update(email + time + secret).digest("hex");
  }
  $scope.generateAuthenticationKey = generateAuthenticationKey;

  $scope.getAccount = function(req, res, next) {
    var resp = res.resp;
    var user = req.user;
    resp.data(user.account());

    resp.send();
  };

  /**
   * Handles endpoint [POST] `/auth/login`. Should be sent over HTTPS.
   *
   * @method /auth/login [POST]
   * @param {String} username Login username or email
   * @param {String} password Login password
   * @return {ResponseModel} with the user information on success, error information on failure.
   */
  $scope.addRoute({
    method: 'post',
    path: '/auth/login',
    controller: $scope.login
  });

  /**
   * Handles endpoint [GET] `/auth/register`. Returns a registrationCode
   *
   * @method /auth/register [GET]
   * @return {ResponseModel} Contains data used for registering a user.
   */
  $scope.addRoute({
    path: '/auth/register',
    controller: $scope.getRegistrationCode
  });

  /**
   * Handles endpoint [POST] `/auth/pre-register`. Returns a registrationCode
   *
   * @method /auth/pre-register [POST]
   * @param {String} email Registration email
   * @return {ResponseModel} with the user information on success, error information on failure.
   */
  $scope.addRoute({
    method: 'post',
    path: '/auth/pre-register',
    controller: $scope.preRegisterUser
  });

  /**
   * Handles endpoint [POST] `/auth/register`. Should be sent over HTTPS.
   *
   * @method /auth/register [POST]
   * @param {String} username Registration username
   * @param {String} email Registration email
   * @param {String} registrationCode The registrationCode from the previous API call.
   * @param {String} password Registration password
   * @param {String} confirm_password Registration password confirmation
   * @return {ResponseModel} with the user information on success, error information on failure.
   */
  $scope.addRoute({
    method: 'post',
    path: '/auth/register',
    controller: $scope.registerUser
  });

  /**
   Login or Register via Facebook

   @method /auth/facebook [POST]
   @param {String} facebook_access_token The token generated by Facebook's OAuth2 API.
   @return {ResponseModel} with user information on success, error information on failure.
   **/
  $scope.addRoute({
    method: 'post',
    path: '/auth/facebook',
    controller: $scope.loginFacebook
  });

  $scope.addRoute({
    method: 'get',
    path: '/auth/linkedin',
    controller: $scope.loginLinkedIn
  });

  $scope.addRoute({
    method: 'post',
    path: '/auth/linkedin',
    controller: $scope.loginLinkedIn
  });

  /**
   Get a passwordCode to reset your password. This will be emailed to the user.

   @method /auth/forgot-password [POST]
   @param {String} email The email address the user registered with.
   @return {ResponseModel} with success or failure information
   **/
  $scope.addRoute({
    method: 'post',
    path: '/auth/forgot-password',
    controller: $scope.forgotPassword
  });

  /**
   Get a passwordCode to reset your password.

   @method /auth/forgot-password [POST]
   @param {String} password_code The password code from the /auth/forgot-password API call.
   @param {String} password Registration password
   @param {String} confirm_password Registration password confirmation
   @return {ResponseModel} with success or failure information
   **/
  $scope.addRoute({
    method: 'post',
    path: '/auth/reset-password',
    controller: $scope.resetPassword
  });

  /**
   * Change your API key
   *
   * @method /users/change-api-key/:authenticationKey [GET]
   * @param {String} authenticationKey Your API key
   * @return {ResponseModel} with user information on success, error information on failure.
   */
  $scope.addRoute({
    path: '/auth/change-api-key',
    controller: $scope.changeAPIKey,
    requiresAuth: true
  });

  $scope.addRoute({
    path: '/account',
    requiresAuth: true,
    controller: $scope.getAccount
  });

  $scope.addRoute({
    path: '/activate/:activation_code',
    controller: $scope.activateAccount
  });

  return $scope;
}

module.exports = AuthController;
